name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test Code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
    - name: Test
      run: go test -v
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build_image:
    name: Build the Docker image
    runs-on: ubuntu-latest
    needs: [test, sonarcloud]
    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: docker build . --tag gedlbauer/my-firstimage:local
    - name: Save the Docker image
      run: docker save -o my-firstimage.tar gedlbauer/my-firstimage:local
    - name: Upload image as artifact
      uses: actions/upload-artifact@v2
      with:
        name: local-image
        path: my-firstimage.tar
  vulnerability_scan:
    name: Scan for Vulnerabilities
    continue-on-error: true
    runs-on: ubuntu-20.04
    needs: build_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download image from artifact
        uses: actions/download-artifact@v2
        with:
          name: local-image
          path: /tmp
      - name: Load image from tarball
        run: docker image load --input /tmp/my-firstimage.tar
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gedlbauer/my-firstimage:local'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
  deploy:
    name: Upload the Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: [build_image, vulnerability_scan]
    steps:
    - uses: actions/checkout@v4
    - name: Authorize to Docker Hub
      run: echo ${{ secrets.REGISTRY_PASSWORD }} | docker login -u gedlbauer --password-stdin
    - name: Download image from artifact
      uses: actions/download-artifact@v2
      with:
        name: local-image
        path: /tmp
    - name: Load image from tarball
      run: docker image load --input /tmp/my-firstimage.tar
    - name: Push the Docker image
      run: |
        GIT_SHA="$(git rev-parse --short HEAD)"
        docker tag gedlbauer/my-firstimage:local gedlbauer/my-firstimage:latest
        docker tag gedlbauer/my-firstimage:local gedlbauer/my-firstimage:$GIT_SHA
        docker push gedlbauer/my-firstimage:latest
        docker push gedlbauer/my-firstimage:$GIT_SHA        
